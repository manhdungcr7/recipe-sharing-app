{"version":3,"file":"SearchResponseAdapter.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","SearchResponseAdapter","_typeof2","_slicedToArray2","_toConsumableArray2","_defineProperty2","_classCallCheck2","_createClass2","_utils","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","typesenseResponse","instantsearchRequest","configuration","allTypesenseResults","undefined","fullTypesenseResponse","key","_adaptGroupedHits","typesenseGroupedHits","_this","adaptedResult","map","groupedHit","adaptedHits","_adaptHits","hits","hit","group_key","found","flattenGroupedHits","flat","adaptedGroupedHit","_grouped_hits","typesenseHits","_this2","typesenseHit","adaptedHit","document","objectID","id","_snippetResult","_adaptHighlightResult","_highlightResult","_rawTypesenseHit","conversation","_rawTypesenseConversation","metadataField","includes","geoLocationValue","geoLocationField","_geoloc","lat","lng","snippetOrValue","result","highlight","isHighlightPost0240RCN32Format","adaptHighlightObject","adaptHighlightsArray","full","snippet","_this3","assign","concat","entries","_ref","_ref2","attribute","matchLevel","matchedWords","highlights","field","matched_tokens","indices","_ref4","_ref5","k","v","matchedIndices","_adaptHighlightNullValue","Array","isArray","unhighlightedValueFromArray","index","_adaptHighlightTag","indexOf","params","highlightPreTag","highlightPostTag","_adaptHighlightInObjectValue","objectValue","highlightObjectValue","_this4","_ref6","_ref7","adaptedValue","_highlightObjectValue","_adaptHighlightInArrayValue","_highlightObjectValue2","_adaptHighlightInPrimitiveValue","arrayValue","highlightArrayValue","_this5","_highlightArrayValue$","_highlightArrayValue$2","primitiveValue","highlightPrimitiveValue","_ref9","_highlightPrimitiveVa","_adaptFacets","typesenseFacetCounts","facet","field_name","counts","count","_adaptFacetStats","stats","_adaptRenderingContent","_adaptedResult$facetO","renderingContent","facetOrdering","facets","order","Set","fc","facet_counts","f","_adaptUserData","metadata","adapt","adaptedRenderingContent","grouped_hits","nbHits","page","nbPages","_adaptNumberOfPages","hitsPerPage","request_params","per_page","facets_stats","query","q","processingTimeMS","search_time_ms","appliedRules","userData","prototype","utils"],"sources":["../src/SearchResponseAdapter.js"],"sourcesContent":["\"use strict\";\n\nimport { utils } from \"./support/utils\";\n\nexport class SearchResponseAdapter {\n  constructor(\n    typesenseResponse,\n    instantsearchRequest,\n    configuration,\n    allTypesenseResults = [],\n    fullTypesenseResponse = {},\n  ) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n    this.configuration = configuration;\n    this.allTypesenseResults = allTypesenseResults;\n    this.fullTypesenseResponse = fullTypesenseResponse;\n  }\n\n  _adaptGroupedHits(typesenseGroupedHits) {\n    let adaptedResult = [];\n\n    adaptedResult = typesenseGroupedHits.map((groupedHit) => {\n      const adaptedHits = this._adaptHits(groupedHit.hits);\n      adaptedHits.forEach((hit) => {\n        hit[\"group_key\"] = hit[\"_group_key\"] = groupedHit.group_key;\n        if (groupedHit.found) {\n          hit[\"_group_found\"] = groupedHit.found;\n        }\n      });\n      return adaptedHits;\n    });\n\n    // adaptedResult is now in the form of [[{}, {}], [{}, {}], ...]\n    //  where each element in the outermost array corresponds to a group.\n\n    if (this.configuration.flattenGroupedHits) {\n      // We flatten it to [{}, {}, {}]\n      adaptedResult = adaptedResult.flat();\n    } else {\n      // We flatten it to [{ ..., grouped_hits: [{}, {}] }, {}, {}]\n      // We set the first element in the group as the hit, and then add a new key called grouped_hits with the other hits\n      adaptedResult = adaptedResult.map((adaptedGroupedHit) => {\n        return {\n          ...adaptedGroupedHit[0],\n          _grouped_hits: adaptedGroupedHit,\n        };\n      });\n    }\n\n    return adaptedResult;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map((typesenseHit) => {\n      const adaptedHit = {\n        ...typesenseHit.document,\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._snippetResult = this._adaptHighlightResult(typesenseHit, \"snippet\");\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit, \"value\");\n      adaptedHit._rawTypesenseHit = typesenseHit;\n\n      // We're adding `conversation` into each hit, since there doesn't seem to be any other way to pass this up to Instantsearch outside of hits\n      if (this.fullTypesenseResponse.conversation) {\n        adaptedHit._rawTypesenseConversation = this.fullTypesenseResponse.conversation;\n      }\n\n      // Add metadata fields to result, if a field with that name doesn't already exist\n      [\n        \"text_match\",\n        \"geo_distance_meters\",\n        \"curated\",\n        \"text_match_info\",\n        \"hybrid_search_info\",\n        \"vector_distance\",\n      ].forEach((metadataField) => {\n        if (Object.keys(typesenseHit).includes(metadataField) && !Object.keys(adaptedHit).includes(metadataField)) {\n          adaptedHit[metadataField] = typesenseHit[metadataField];\n        }\n      });\n\n      const geoLocationValue = adaptedHit[this.configuration.geoLocationField];\n      if (geoLocationValue) {\n        adaptedHit._geoloc = {\n          lat: geoLocationValue[0],\n          lng: geoLocationValue[1],\n        };\n      }\n\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightResult(typesenseHit, snippetOrValue) {\n    const result = {};\n\n    // If there is a highlight object available (as of v0.24.0),\n    // And the highlight object uses the highlight format available in v0.24.0.rcn32 and above\n    //  use that instead of the highlights array, since it supports highlights of nested fields\n    if (typesenseHit.highlight != null && this.isHighlightPost0240RCN32Format(typesenseHit.highlight)) {\n      this.adaptHighlightObject(typesenseHit, result, snippetOrValue);\n    } else {\n      this.adaptHighlightsArray(typesenseHit, result, snippetOrValue);\n    }\n    return result;\n  }\n\n  isHighlightPost0240RCN32Format(highlight) {\n    return highlight.full == null && highlight.snippet == null;\n  }\n\n  adaptHighlightsArray(typesenseHit, result, snippetOrValue) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    Object.assign(\n      result,\n      ...Object.entries(typesenseHit.document).map(([attribute, value]) => ({\n        [attribute]: {\n          value: value,\n          matchLevel: \"none\",\n          matchedWords: [],\n        },\n      })),\n    );\n\n    typesenseHit.highlights.forEach((highlight) => {\n      result[highlight.field] = {\n        value: highlight[snippetOrValue] || highlight[`${snippetOrValue}s`],\n        matchLevel: \"full\",\n        matchedWords: highlight.matched_tokens,\n      };\n\n      if (highlight.indices) {\n        result[highlight.field][\"matchedIndices\"] = highlight.indices;\n      }\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.entries(result).forEach(([k, v]) => {\n      const attribute = k;\n      const { value, matchLevel, matchedWords, matchedIndices } = v;\n      if (value == null) {\n        result[attribute] = this._adaptHighlightNullValue();\n      } else if (Array.isArray(value)) {\n        // Algolia lists all values of the key in highlights, even those that don't have any highlights\n        // So add all values of the array field, including highlights\n        result[attribute] = [];\n        typesenseHit.document[attribute].forEach((unhighlightedValueFromArray, index) => {\n          if (matchedIndices && matchedIndices.includes(index)) {\n            result[attribute].push({\n              value: this._adaptHighlightTag(\n                `${value[matchedIndices.indexOf(index)]}`,\n                this.instantsearchRequest.params.highlightPreTag,\n                this.instantsearchRequest.params.highlightPostTag,\n              ),\n              matchLevel: matchLevel,\n              matchedWords: matchedWords[index],\n            });\n          } else if (typeof unhighlightedValueFromArray === \"object\") {\n            // Handle arrays of objects\n            // Side note: Typesense does not support highlights for nested objects in this `highlights` array,\n            //  so we pass in an empty object below\n            result[attribute].push(this._adaptHighlightInObjectValue(unhighlightedValueFromArray, {}, snippetOrValue));\n          } else {\n            result[attribute].push({\n              value: `${unhighlightedValueFromArray}`,\n              matchLevel: \"none\",\n              matchedWords: [],\n            });\n          }\n        });\n      } else if (typeof value === \"object\") {\n        // Handle nested objects\n        // Side note: Typesense does not support highlights for nested objects in this `highlights` array,\n        //  so we pass in an empty object below\n        result[attribute] = this._adaptHighlightInObjectValue(value, {}, snippetOrValue);\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(\n          `${value}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag,\n        );\n      }\n    });\n  }\n\n  adaptHighlightObject(typesenseHit, result, snippetOrValue) {\n    Object.assign(\n      result,\n      this._adaptHighlightInObjectValue(typesenseHit.document, typesenseHit.highlight, snippetOrValue),\n    );\n  }\n\n  _adaptHighlightInObjectValue(objectValue, highlightObjectValue, snippetOrValue) {\n    return Object.assign(\n      {},\n      ...Object.entries(objectValue).map(([attribute, value]) => {\n        let adaptedValue;\n        if (value == null) {\n          adaptedValue = this._adaptHighlightNullValue();\n        } else if (Array.isArray(value)) {\n          adaptedValue = this._adaptHighlightInArrayValue(\n            value,\n            highlightObjectValue?.[attribute] ?? [],\n            snippetOrValue,\n          );\n        } else if (typeof value === \"object\") {\n          adaptedValue = this._adaptHighlightInObjectValue(\n            value,\n            highlightObjectValue?.[attribute] ?? {},\n            snippetOrValue,\n          );\n        } else {\n          adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightObjectValue?.[attribute], snippetOrValue);\n        }\n\n        return {\n          [attribute]: adaptedValue,\n        };\n      }),\n    );\n  }\n\n  _adaptHighlightInArrayValue(arrayValue, highlightArrayValue, snippetOrValue) {\n    return arrayValue.map((value, index) => {\n      let adaptedValue;\n      if (value == null) {\n        adaptedValue = this._adaptHighlightNullValue();\n      } else if (Array.isArray(value)) {\n        adaptedValue = this._adaptHighlightInArrayValue(value, highlightArrayValue?.[index] ?? [], snippetOrValue);\n      } else if (typeof value === \"object\") {\n        adaptedValue = this._adaptHighlightInObjectValue(value, highlightArrayValue?.[index] ?? {}, snippetOrValue);\n      } else {\n        adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightArrayValue?.[index], snippetOrValue);\n      }\n      return adaptedValue;\n    });\n  }\n\n  _adaptHighlightInPrimitiveValue(primitiveValue, highlightPrimitiveValue, snippetOrValue) {\n    if (highlightPrimitiveValue != null) {\n      return {\n        value: this._adaptHighlightTag(\n          `${\n            highlightPrimitiveValue[snippetOrValue] ??\n            highlightPrimitiveValue[\"highlight\"] ??\n            highlightPrimitiveValue[\"snippet\"]\n          }`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag,\n        ),\n        matchLevel: (highlightPrimitiveValue.matched_tokens || []).length > 0 ? \"full\" : \"none\",\n        matchedWords: highlightPrimitiveValue.matched_tokens || [],\n      };\n    } else {\n      return {\n        // Convert all values to strings\n        value: this._adaptHighlightTag(\n          `${primitiveValue}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag,\n        ),\n        matchLevel: \"none\",\n        matchedWords: [],\n      };\n    }\n  }\n\n  _adaptHighlightNullValue() {\n    return {\n      value: \"\",\n      matchLevel: \"none\",\n      matchedWords: [],\n    };\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      Object.assign(adaptedResult, {\n        [facet.field_name]: Object.assign({}, ...facet.counts.map((count) => ({ [count.value]: count.count }))),\n      });\n    });\n    return adaptedResult;\n  }\n\n  _adaptFacetStats(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      if (Object.keys(facet.stats).length > 0) {\n        Object.assign(adaptedResult, {\n          [facet.field_name]: facet.stats,\n        });\n      }\n    });\n    return adaptedResult;\n  }\n\n  _adaptRenderingContent(typesenseFacetCounts) {\n    const adaptedResult = Object.assign({}, this.configuration.renderingContent);\n\n    // Only set facet ordering if the user has not set one\n    if (adaptedResult.facetOrdering?.facets?.order == null) {\n      adaptedResult.facetOrdering = adaptedResult.facetOrdering || {};\n      adaptedResult.facetOrdering.facets = adaptedResult.facetOrdering.facets || {};\n      adaptedResult.facetOrdering.facets.order = [\n        ...new Set(\n          typesenseFacetCounts\n            .map((fc) => fc[\"field_name\"])\n            .concat(\n              this.allTypesenseResults\n                .map((r) => r.facet_counts || [])\n                .flat()\n                .map((fc) => fc[\"field_name\"])\n                .filter((f) => f),\n            ),\n        ),\n      ];\n    }\n\n    return adaptedResult;\n  }\n\n  _adaptUserData(metadata) {\n    if (!metadata) return [];\n\n    return Array.isArray(metadata) ? metadata : [metadata];\n  }\n\n  adapt() {\n    const adaptedRenderingContent = this._adaptRenderingContent(this.typesenseResponse.facet_counts || []);\n    const adaptedResult = {\n      hits: this.typesenseResponse.grouped_hits\n        ? this._adaptGroupedHits(this.typesenseResponse.grouped_hits)\n        : this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.page - 1,\n      nbPages: this._adaptNumberOfPages(),\n      hitsPerPage: this.typesenseResponse.request_params.per_page,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts || []),\n      facets_stats: this._adaptFacetStats(this.typesenseResponse.facet_counts || {}),\n      query: this.typesenseResponse.request_params.q,\n      processingTimeMS: this.typesenseResponse.search_time_ms,\n      ...(Object.keys(adaptedRenderingContent).length > 0 ? { renderingContent: adaptedRenderingContent } : null),\n    };\n\n    // Add appliedRules if metadata is present\n    if (this.typesenseResponse.metadata) {\n      adaptedResult.appliedRules = [\"typesense-override\"];\n      adaptedResult.userData = this._adaptUserData(this.typesenseResponse.metadata);\n    }\n\n    // If no results were found for the search, but there is still a conversation response,\n    // still send that as a hit so the conversation is accessible via Instantsearch\n    if (this.fullTypesenseResponse.conversation && adaptedResult.hits.length === 0) {\n      adaptedResult.hits = [\n        {\n          _rawTypesenseConversation: this.fullTypesenseResponse.conversation,\n        },\n      ];\n    }\n\n    // console.log(adaptedResult);\n    return adaptedResult;\n  }\n}\n\nObject.assign(SearchResponseAdapter.prototype, utils);\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,qBAAA;AAAA,IAAAC,QAAA,GAAAP,sBAAA,CAAAC,OAAA;AAAA,IAAAO,eAAA,GAAAR,sBAAA,CAAAC,OAAA;AAAA,IAAAQ,mBAAA,GAAAT,sBAAA,CAAAC,OAAA;AAAA,IAAAS,gBAAA,GAAAV,sBAAA,CAAAC,OAAA;AAAA,IAAAU,gBAAA,GAAAX,sBAAA,CAAAC,OAAA;AAAA,IAAAW,aAAA,GAAAZ,sBAAA,CAAAC,OAAA;AAEb,IAAAY,MAAA,GAAAZ,OAAA;AAAwC,SAAAa,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAf,MAAA,CAAAgB,IAAA,CAAAH,CAAA,OAAAb,MAAA,CAAAiB,qBAAA,QAAAC,CAAA,GAAAlB,MAAA,CAAAiB,qBAAA,CAAAJ,CAAA,GAAAC,CAAA,KAAAI,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAL,CAAA,WAAAd,MAAA,CAAAoB,wBAAA,CAAAP,CAAA,EAAAC,CAAA,EAAAO,UAAA,OAAAN,CAAA,CAAAO,IAAA,CAAAC,KAAA,CAAAR,CAAA,EAAAG,CAAA,YAAAH,CAAA;AAAA,SAAAS,cAAAX,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAW,SAAA,CAAAC,MAAA,EAAAZ,CAAA,UAAAC,CAAA,WAAAU,SAAA,CAAAX,CAAA,IAAAW,SAAA,CAAAX,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAZ,MAAA,CAAAe,CAAA,OAAAY,OAAA,WAAAb,CAAA,QAAAN,gBAAA,aAAAK,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAd,MAAA,CAAA4B,yBAAA,GAAA5B,MAAA,CAAA6B,gBAAA,CAAAhB,CAAA,EAAAb,MAAA,CAAA4B,yBAAA,CAAAb,CAAA,KAAAH,OAAA,CAAAZ,MAAA,CAAAe,CAAA,GAAAY,OAAA,WAAAb,CAAA,IAAAd,MAAA,CAAAC,cAAA,CAAAY,CAAA,EAAAC,CAAA,EAAAd,MAAA,CAAAoB,wBAAA,CAAAL,CAAA,EAAAD,CAAA,iBAAAD,CAAA;AAAA,IAE3BT,qBAAqB,GAAAF,OAAA,CAAAE,qBAAA;EAChC,SAAAA,sBACE0B,iBAAiB,EACjBC,oBAAoB,EACpBC,aAAa,EAGb;IAAA,IAFAC,mBAAmB,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAS,SAAA,GAAAT,SAAA,MAAG,EAAE;IAAA,IACxBU,qBAAqB,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAS,SAAA,GAAAT,SAAA,MAAG,CAAC,CAAC;IAAA,IAAAhB,gBAAA,mBAAAL,qBAAA;IAE1B,IAAI,CAAC0B,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACE,qBAAqB,GAAGA,qBAAqB;EACpD;EAAC,WAAAzB,aAAA,aAAAN,qBAAA;IAAAgC,GAAA;IAAAjC,KAAA,EAED,SAAAkC,kBAAkBC,oBAAoB,EAAE;MAAA,IAAAC,KAAA;MACtC,IAAIC,aAAa,GAAG,EAAE;MAEtBA,aAAa,GAAGF,oBAAoB,CAACG,GAAG,CAAC,UAACC,UAAU,EAAK;QACvD,IAAMC,WAAW,GAAGJ,KAAI,CAACK,UAAU,CAACF,UAAU,CAACG,IAAI,CAAC;QACpDF,WAAW,CAAChB,OAAO,CAAC,UAACmB,GAAG,EAAK;UAC3BA,GAAG,CAAC,WAAW,CAAC,GAAGA,GAAG,CAAC,YAAY,CAAC,GAAGJ,UAAU,CAACK,SAAS;UAC3D,IAAIL,UAAU,CAACM,KAAK,EAAE;YACpBF,GAAG,CAAC,cAAc,CAAC,GAAGJ,UAAU,CAACM,KAAK;UACxC;QACF,CAAC,CAAC;QACF,OAAOL,WAAW;MACpB,CAAC,CAAC;;MAEF;MACA;;MAEA,IAAI,IAAI,CAACX,aAAa,CAACiB,kBAAkB,EAAE;QACzC;QACAT,aAAa,GAAGA,aAAa,CAACU,IAAI,CAAC,CAAC;MACtC,CAAC,MAAM;QACL;QACA;QACAV,aAAa,GAAGA,aAAa,CAACC,GAAG,CAAC,UAACU,iBAAiB,EAAK;UACvD,OAAA3B,aAAA,CAAAA,aAAA,KACK2B,iBAAiB,CAAC,CAAC,CAAC;YACvBC,aAAa,EAAED;UAAiB;QAEpC,CAAC,CAAC;MACJ;MAEA,OAAOX,aAAa;IACtB;EAAC;IAAAJ,GAAA;IAAAjC,KAAA,EAED,SAAAyC,WAAWS,aAAa,EAAE;MAAA,IAAAC,MAAA;MACxB,IAAId,aAAa,GAAG,EAAE;MACtBA,aAAa,GAAGa,aAAa,CAACZ,GAAG,CAAC,UAACc,YAAY,EAAK;QAClD,IAAMC,UAAU,GAAAhC,aAAA,KACX+B,YAAY,CAACE,QAAQ,CACzB;QACDD,UAAU,CAACE,QAAQ,GAAGH,YAAY,CAACE,QAAQ,CAACE,EAAE;QAC9CH,UAAU,CAACI,cAAc,GAAGN,MAAI,CAACO,qBAAqB,CAACN,YAAY,EAAE,SAAS,CAAC;QAC/EC,UAAU,CAACM,gBAAgB,GAAGR,MAAI,CAACO,qBAAqB,CAACN,YAAY,EAAE,OAAO,CAAC;QAC/EC,UAAU,CAACO,gBAAgB,GAAGR,YAAY;;QAE1C;QACA,IAAID,MAAI,CAACnB,qBAAqB,CAAC6B,YAAY,EAAE;UAC3CR,UAAU,CAACS,yBAAyB,GAAGX,MAAI,CAACnB,qBAAqB,CAAC6B,YAAY;QAChF;;QAEA;QACA,CACE,YAAY,EACZ,qBAAqB,EACrB,SAAS,EACT,iBAAiB,EACjB,oBAAoB,EACpB,iBAAiB,CAClB,CAACrC,OAAO,CAAC,UAACuC,aAAa,EAAK;UAC3B,IAAIlE,MAAM,CAACgB,IAAI,CAACuC,YAAY,CAAC,CAACY,QAAQ,CAACD,aAAa,CAAC,IAAI,CAAClE,MAAM,CAACgB,IAAI,CAACwC,UAAU,CAAC,CAACW,QAAQ,CAACD,aAAa,CAAC,EAAE;YACzGV,UAAU,CAACU,aAAa,CAAC,GAAGX,YAAY,CAACW,aAAa,CAAC;UACzD;QACF,CAAC,CAAC;QAEF,IAAME,gBAAgB,GAAGZ,UAAU,CAACF,MAAI,CAACtB,aAAa,CAACqC,gBAAgB,CAAC;QACxE,IAAID,gBAAgB,EAAE;UACpBZ,UAAU,CAACc,OAAO,GAAG;YACnBC,GAAG,EAAEH,gBAAgB,CAAC,CAAC,CAAC;YACxBI,GAAG,EAAEJ,gBAAgB,CAAC,CAAC;UACzB,CAAC;QACH;QAEA,OAAOZ,UAAU;MACnB,CAAC,CAAC;MACF,OAAOhB,aAAa;IACtB;EAAC;IAAAJ,GAAA;IAAAjC,KAAA,EAED,SAAA0D,sBAAsBN,YAAY,EAAEkB,cAAc,EAAE;MAClD,IAAMC,MAAM,GAAG,CAAC,CAAC;;MAEjB;MACA;MACA;MACA,IAAInB,YAAY,CAACoB,SAAS,IAAI,IAAI,IAAI,IAAI,CAACC,8BAA8B,CAACrB,YAAY,CAACoB,SAAS,CAAC,EAAE;QACjG,IAAI,CAACE,oBAAoB,CAACtB,YAAY,EAAEmB,MAAM,EAAED,cAAc,CAAC;MACjE,CAAC,MAAM;QACL,IAAI,CAACK,oBAAoB,CAACvB,YAAY,EAAEmB,MAAM,EAAED,cAAc,CAAC;MACjE;MACA,OAAOC,MAAM;IACf;EAAC;IAAAtC,GAAA;IAAAjC,KAAA,EAED,SAAAyE,+BAA+BD,SAAS,EAAE;MACxC,OAAOA,SAAS,CAACI,IAAI,IAAI,IAAI,IAAIJ,SAAS,CAACK,OAAO,IAAI,IAAI;IAC5D;EAAC;IAAA5C,GAAA;IAAAjC,KAAA,EAED,SAAA2E,qBAAqBvB,YAAY,EAAEmB,MAAM,EAAED,cAAc,EAAE;MAAA,IAAAQ,MAAA;MACzD;MACA;;MAEAjF,MAAM,CAACkF,MAAM,CAAA3D,KAAA,CAAbvB,MAAM,GACJ0E,MAAM,EAAAS,MAAA,KAAA5E,mBAAA,aACHP,MAAM,CAACoF,OAAO,CAAC7B,YAAY,CAACE,QAAQ,CAAC,CAAChB,GAAG,CAAC,UAAA4C,IAAA;QAAA,IAAAC,KAAA,OAAAhF,eAAA,aAAA+E,IAAA;UAAEE,SAAS,GAAAD,KAAA;UAAEnF,KAAK,GAAAmF,KAAA;QAAA,WAAA9E,gBAAA,iBAC5D+E,SAAS,EAAG;UACXpF,KAAK,EAAEA,KAAK;UACZqF,UAAU,EAAE,MAAM;UAClBC,YAAY,EAAE;QAChB,CAAC;MAAA,CACD,CAAC,EACL,CAAC;MAEDlC,YAAY,CAACmC,UAAU,CAAC/D,OAAO,CAAC,UAACgD,SAAS,EAAK;QAC7CD,MAAM,CAACC,SAAS,CAACgB,KAAK,CAAC,GAAG;UACxBxF,KAAK,EAAEwE,SAAS,CAACF,cAAc,CAAC,IAAIE,SAAS,IAAAQ,MAAA,CAAIV,cAAc,OAAI;UACnEe,UAAU,EAAE,MAAM;UAClBC,YAAY,EAAEd,SAAS,CAACiB;QAC1B,CAAC;QAED,IAAIjB,SAAS,CAACkB,OAAO,EAAE;UACrBnB,MAAM,CAACC,SAAS,CAACgB,KAAK,CAAC,CAAC,gBAAgB,CAAC,GAAGhB,SAAS,CAACkB,OAAO;QAC/D;MACF,CAAC,CAAC;;MAEF;MACA;MACA7F,MAAM,CAACoF,OAAO,CAACV,MAAM,CAAC,CAAC/C,OAAO,CAAC,UAAAmE,KAAA,EAAY;QAAA,IAAAC,KAAA,OAAAzF,eAAA,aAAAwF,KAAA;UAAVE,CAAC,GAAAD,KAAA;UAAEE,CAAC,GAAAF,KAAA;QACnC,IAAMR,SAAS,GAAGS,CAAC;QACnB,IAAQ7F,KAAK,GAA+C8F,CAAC,CAArD9F,KAAK;UAAEqF,UAAU,GAAmCS,CAAC,CAA9CT,UAAU;UAAEC,YAAY,GAAqBQ,CAAC,CAAlCR,YAAY;UAAES,cAAc,GAAKD,CAAC,CAApBC,cAAc;QACvD,IAAI/F,KAAK,IAAI,IAAI,EAAE;UACjBuE,MAAM,CAACa,SAAS,CAAC,GAAGN,MAAI,CAACkB,wBAAwB,CAAC,CAAC;QACrD,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAAClG,KAAK,CAAC,EAAE;UAC/B;UACA;UACAuE,MAAM,CAACa,SAAS,CAAC,GAAG,EAAE;UACtBhC,YAAY,CAACE,QAAQ,CAAC8B,SAAS,CAAC,CAAC5D,OAAO,CAAC,UAAC2E,2BAA2B,EAAEC,KAAK,EAAK;YAC/E,IAAIL,cAAc,IAAIA,cAAc,CAAC/B,QAAQ,CAACoC,KAAK,CAAC,EAAE;cACpD7B,MAAM,CAACa,SAAS,CAAC,CAACjE,IAAI,CAAC;gBACrBnB,KAAK,EAAE8E,MAAI,CAACuB,kBAAkB,IAAArB,MAAA,CACzBhF,KAAK,CAAC+F,cAAc,CAACO,OAAO,CAACF,KAAK,CAAC,CAAC,GACvCtB,MAAI,CAAClD,oBAAoB,CAAC2E,MAAM,CAACC,eAAe,EAChD1B,MAAI,CAAClD,oBAAoB,CAAC2E,MAAM,CAACE,gBACnC,CAAC;gBACDpB,UAAU,EAAEA,UAAU;gBACtBC,YAAY,EAAEA,YAAY,CAACc,KAAK;cAClC,CAAC,CAAC;YACJ,CAAC,MAAM,IAAI,IAAAlG,QAAA,aAAOiG,2BAA2B,MAAK,QAAQ,EAAE;cAC1D;cACA;cACA;cACA5B,MAAM,CAACa,SAAS,CAAC,CAACjE,IAAI,CAAC2D,MAAI,CAAC4B,4BAA4B,CAACP,2BAA2B,EAAE,CAAC,CAAC,EAAE7B,cAAc,CAAC,CAAC;YAC5G,CAAC,MAAM;cACLC,MAAM,CAACa,SAAS,CAAC,CAACjE,IAAI,CAAC;gBACrBnB,KAAK,KAAAgF,MAAA,CAAKmB,2BAA2B,CAAE;gBACvCd,UAAU,EAAE,MAAM;gBAClBC,YAAY,EAAE;cAChB,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,IAAApF,QAAA,aAAOF,KAAK,MAAK,QAAQ,EAAE;UACpC;UACA;UACA;UACAuE,MAAM,CAACa,SAAS,CAAC,GAAGN,MAAI,CAAC4B,4BAA4B,CAAC1G,KAAK,EAAE,CAAC,CAAC,EAAEsE,cAAc,CAAC;QAClF,CAAC,MAAM;UACL;UACAC,MAAM,CAACa,SAAS,CAAC,CAACpF,KAAK,GAAG8E,MAAI,CAACuB,kBAAkB,IAAArB,MAAA,CAC5ChF,KAAK,GACR8E,MAAI,CAAClD,oBAAoB,CAAC2E,MAAM,CAACC,eAAe,EAChD1B,MAAI,CAAClD,oBAAoB,CAAC2E,MAAM,CAACE,gBACnC,CAAC;QACH;MACF,CAAC,CAAC;IACJ;EAAC;IAAAxE,GAAA;IAAAjC,KAAA,EAED,SAAA0E,qBAAqBtB,YAAY,EAAEmB,MAAM,EAAED,cAAc,EAAE;MACzDzE,MAAM,CAACkF,MAAM,CACXR,MAAM,EACN,IAAI,CAACmC,4BAA4B,CAACtD,YAAY,CAACE,QAAQ,EAAEF,YAAY,CAACoB,SAAS,EAAEF,cAAc,CACjG,CAAC;IACH;EAAC;IAAArC,GAAA;IAAAjC,KAAA,EAED,SAAA0G,6BAA6BC,WAAW,EAAEC,oBAAoB,EAAEtC,cAAc,EAAE;MAAA,IAAAuC,MAAA;MAC9E,OAAOhH,MAAM,CAACkF,MAAM,CAAA3D,KAAA,CAAbvB,MAAM,GACX,CAAC,CAAC,EAAAmF,MAAA,KAAA5E,mBAAA,aACCP,MAAM,CAACoF,OAAO,CAAC0B,WAAW,CAAC,CAACrE,GAAG,CAAC,UAAAwE,KAAA,EAAwB;QAAA,IAAAC,KAAA,OAAA5G,eAAA,aAAA2G,KAAA;UAAtB1B,SAAS,GAAA2B,KAAA;UAAE/G,KAAK,GAAA+G,KAAA;QACnD,IAAIC,YAAY;QAChB,IAAIhH,KAAK,IAAI,IAAI,EAAE;UACjBgH,YAAY,GAAGH,MAAI,CAACb,wBAAwB,CAAC,CAAC;QAChD,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAAClG,KAAK,CAAC,EAAE;UAAA,IAAAiH,qBAAA;UAC/BD,YAAY,GAAGH,MAAI,CAACK,2BAA2B,CAC7ClH,KAAK,GAAAiH,qBAAA,GACLL,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAGxB,SAAS,CAAC,cAAA6B,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EACvC3C,cACF,CAAC;QACH,CAAC,MAAM,IAAI,IAAApE,QAAA,aAAOF,KAAK,MAAK,QAAQ,EAAE;UAAA,IAAAmH,sBAAA;UACpCH,YAAY,GAAGH,MAAI,CAACH,4BAA4B,CAC9C1G,KAAK,GAAAmH,sBAAA,GACLP,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAGxB,SAAS,CAAC,cAAA+B,sBAAA,cAAAA,sBAAA,GAAI,CAAC,CAAC,EACvC7C,cACF,CAAC;QACH,CAAC,MAAM;UACL0C,YAAY,GAAGH,MAAI,CAACO,+BAA+B,CAACpH,KAAK,EAAE4G,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAGxB,SAAS,CAAC,EAAEd,cAAc,CAAC;QAC/G;QAEA,WAAAjE,gBAAA,iBACG+E,SAAS,EAAG4B,YAAY;MAE7B,CAAC,CAAC,EACJ,CAAC;IACH;EAAC;IAAA/E,GAAA;IAAAjC,KAAA,EAED,SAAAkH,4BAA4BG,UAAU,EAAEC,mBAAmB,EAAEhD,cAAc,EAAE;MAAA,IAAAiD,MAAA;MAC3E,OAAOF,UAAU,CAAC/E,GAAG,CAAC,UAACtC,KAAK,EAAEoG,KAAK,EAAK;QACtC,IAAIY,YAAY;QAChB,IAAIhH,KAAK,IAAI,IAAI,EAAE;UACjBgH,YAAY,GAAGO,MAAI,CAACvB,wBAAwB,CAAC,CAAC;QAChD,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAAClG,KAAK,CAAC,EAAE;UAAA,IAAAwH,qBAAA;UAC/BR,YAAY,GAAGO,MAAI,CAACL,2BAA2B,CAAClH,KAAK,GAAAwH,qBAAA,GAAEF,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAGlB,KAAK,CAAC,cAAAoB,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EAAElD,cAAc,CAAC;QAC5G,CAAC,MAAM,IAAI,IAAApE,QAAA,aAAOF,KAAK,MAAK,QAAQ,EAAE;UAAA,IAAAyH,sBAAA;UACpCT,YAAY,GAAGO,MAAI,CAACb,4BAA4B,CAAC1G,KAAK,GAAAyH,sBAAA,GAAEH,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAGlB,KAAK,CAAC,cAAAqB,sBAAA,cAAAA,sBAAA,GAAI,CAAC,CAAC,EAAEnD,cAAc,CAAC;QAC7G,CAAC,MAAM;UACL0C,YAAY,GAAGO,MAAI,CAACH,+BAA+B,CAACpH,KAAK,EAAEsH,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAGlB,KAAK,CAAC,EAAE9B,cAAc,CAAC;QAC1G;QACA,OAAO0C,YAAY;MACrB,CAAC,CAAC;IACJ;EAAC;IAAA/E,GAAA;IAAAjC,KAAA,EAED,SAAAoH,gCAAgCM,cAAc,EAAEC,uBAAuB,EAAErD,cAAc,EAAE;MACvF,IAAIqD,uBAAuB,IAAI,IAAI,EAAE;QAAA,IAAAC,KAAA,EAAAC,qBAAA;QACnC,OAAO;UACL7H,KAAK,EAAE,IAAI,CAACqG,kBAAkB,IAAArB,MAAA,EAAA4C,KAAA,IAAAC,qBAAA,GAE1BF,uBAAuB,CAACrD,cAAc,CAAC,cAAAuD,qBAAA,cAAAA,qBAAA,GACvCF,uBAAuB,CAAC,WAAW,CAAC,cAAAC,KAAA,cAAAA,KAAA,GACpCD,uBAAuB,CAAC,SAAS,CAAC,GAEpC,IAAI,CAAC/F,oBAAoB,CAAC2E,MAAM,CAACC,eAAe,EAChD,IAAI,CAAC5E,oBAAoB,CAAC2E,MAAM,CAACE,gBACnC,CAAC;UACDpB,UAAU,EAAE,CAACsC,uBAAuB,CAAClC,cAAc,IAAI,EAAE,EAAElE,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;UACvF+D,YAAY,EAAEqC,uBAAuB,CAAClC,cAAc,IAAI;QAC1D,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACL;UACAzF,KAAK,EAAE,IAAI,CAACqG,kBAAkB,IAAArB,MAAA,CACzB0C,cAAc,GACjB,IAAI,CAAC9F,oBAAoB,CAAC2E,MAAM,CAACC,eAAe,EAChD,IAAI,CAAC5E,oBAAoB,CAAC2E,MAAM,CAACE,gBACnC,CAAC;UACDpB,UAAU,EAAE,MAAM;UAClBC,YAAY,EAAE;QAChB,CAAC;MACH;IACF;EAAC;IAAArD,GAAA;IAAAjC,KAAA,EAED,SAAAgG,yBAAA,EAA2B;MACzB,OAAO;QACLhG,KAAK,EAAE,EAAE;QACTqF,UAAU,EAAE,MAAM;QAClBC,YAAY,EAAE;MAChB,CAAC;IACH;EAAC;IAAArD,GAAA;IAAAjC,KAAA,EAED,SAAA8H,aAAaC,oBAAoB,EAAE;MACjC,IAAM1F,aAAa,GAAG,CAAC,CAAC;MACxB0F,oBAAoB,CAACvG,OAAO,CAAC,UAACwG,KAAK,EAAK;QACtCnI,MAAM,CAACkF,MAAM,CAAC1C,aAAa,MAAAhC,gBAAA,iBACxB2H,KAAK,CAACC,UAAU,EAAGpI,MAAM,CAACkF,MAAM,CAAA3D,KAAA,CAAbvB,MAAM,GAAQ,CAAC,CAAC,EAAAmF,MAAA,KAAA5E,mBAAA,aAAK4H,KAAK,CAACE,MAAM,CAAC5F,GAAG,CAAC,UAAC6F,KAAK;UAAA,WAAA9H,gBAAA,iBAAS8H,KAAK,CAACnI,KAAK,EAAGmI,KAAK,CAACA,KAAK;QAAA,CAAG,CAAC,GAAC,CACxG,CAAC;MACJ,CAAC,CAAC;MACF,OAAO9F,aAAa;IACtB;EAAC;IAAAJ,GAAA;IAAAjC,KAAA,EAED,SAAAoI,iBAAiBL,oBAAoB,EAAE;MACrC,IAAM1F,aAAa,GAAG,CAAC,CAAC;MACxB0F,oBAAoB,CAACvG,OAAO,CAAC,UAACwG,KAAK,EAAK;QACtC,IAAInI,MAAM,CAACgB,IAAI,CAACmH,KAAK,CAACK,KAAK,CAAC,CAAC9G,MAAM,GAAG,CAAC,EAAE;UACvC1B,MAAM,CAACkF,MAAM,CAAC1C,aAAa,MAAAhC,gBAAA,iBACxB2H,KAAK,CAACC,UAAU,EAAGD,KAAK,CAACK,KAAK,CAChC,CAAC;QACJ;MACF,CAAC,CAAC;MACF,OAAOhG,aAAa;IACtB;EAAC;IAAAJ,GAAA;IAAAjC,KAAA,EAED,SAAAsI,uBAAuBP,oBAAoB,EAAE;MAAA,IAAAQ,qBAAA;MAC3C,IAAMlG,aAAa,GAAGxC,MAAM,CAACkF,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAClD,aAAa,CAAC2G,gBAAgB,CAAC;;MAE5E;MACA,IAAI,EAAAD,qBAAA,GAAAlG,aAAa,CAACoG,aAAa,cAAAF,qBAAA,gBAAAA,qBAAA,GAA3BA,qBAAA,CAA6BG,MAAM,cAAAH,qBAAA,uBAAnCA,qBAAA,CAAqCI,KAAK,KAAI,IAAI,EAAE;QACtDtG,aAAa,CAACoG,aAAa,GAAGpG,aAAa,CAACoG,aAAa,IAAI,CAAC,CAAC;QAC/DpG,aAAa,CAACoG,aAAa,CAACC,MAAM,GAAGrG,aAAa,CAACoG,aAAa,CAACC,MAAM,IAAI,CAAC,CAAC;QAC7ErG,aAAa,CAACoG,aAAa,CAACC,MAAM,CAACC,KAAK,OAAAvI,mBAAA,aACnC,IAAIwI,GAAG,CACRb,oBAAoB,CACjBzF,GAAG,CAAC,UAACuG,EAAE;UAAA,OAAKA,EAAE,CAAC,YAAY,CAAC;QAAA,EAAC,CAC7B7D,MAAM,CACL,IAAI,CAAClD,mBAAmB,CACrBQ,GAAG,CAAC,UAAC3B,CAAC;UAAA,OAAKA,CAAC,CAACmI,YAAY,IAAI,EAAE;QAAA,EAAC,CAChC/F,IAAI,CAAC,CAAC,CACNT,GAAG,CAAC,UAACuG,EAAE;UAAA,OAAKA,EAAE,CAAC,YAAY,CAAC;QAAA,EAAC,CAC7B7H,MAAM,CAAC,UAAC+H,CAAC;UAAA,OAAKA,CAAC;QAAA,EACpB,CACJ,CAAC,CACF;MACH;MAEA,OAAO1G,aAAa;IACtB;EAAC;IAAAJ,GAAA;IAAAjC,KAAA,EAED,SAAAgJ,eAAeC,QAAQ,EAAE;MACvB,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;MAExB,OAAOhD,KAAK,CAACC,OAAO,CAAC+C,QAAQ,CAAC,GAAGA,QAAQ,GAAG,CAACA,QAAQ,CAAC;IACxD;EAAC;IAAAhH,GAAA;IAAAjC,KAAA,EAED,SAAAkJ,MAAA,EAAQ;MACN,IAAMC,uBAAuB,GAAG,IAAI,CAACb,sBAAsB,CAAC,IAAI,CAAC3G,iBAAiB,CAACmH,YAAY,IAAI,EAAE,CAAC;MACtG,IAAMzG,aAAa,GAAAhB,aAAA;QACjBqB,IAAI,EAAE,IAAI,CAACf,iBAAiB,CAACyH,YAAY,GACrC,IAAI,CAAClH,iBAAiB,CAAC,IAAI,CAACP,iBAAiB,CAACyH,YAAY,CAAC,GAC3D,IAAI,CAAC3G,UAAU,CAAC,IAAI,CAACd,iBAAiB,CAACe,IAAI,CAAC;QAChD2G,MAAM,EAAE,IAAI,CAAC1H,iBAAiB,CAACkB,KAAK;QACpCyG,IAAI,EAAE,IAAI,CAAC3H,iBAAiB,CAAC2H,IAAI,GAAG,CAAC;QACrCC,OAAO,EAAE,IAAI,CAACC,mBAAmB,CAAC,CAAC;QACnCC,WAAW,EAAE,IAAI,CAAC9H,iBAAiB,CAAC+H,cAAc,CAACC,QAAQ;QAC3DjB,MAAM,EAAE,IAAI,CAACZ,YAAY,CAAC,IAAI,CAACnG,iBAAiB,CAACmH,YAAY,IAAI,EAAE,CAAC;QACpEc,YAAY,EAAE,IAAI,CAACxB,gBAAgB,CAAC,IAAI,CAACzG,iBAAiB,CAACmH,YAAY,IAAI,CAAC,CAAC,CAAC;QAC9Ee,KAAK,EAAE,IAAI,CAAClI,iBAAiB,CAAC+H,cAAc,CAACI,CAAC;QAC9CC,gBAAgB,EAAE,IAAI,CAACpI,iBAAiB,CAACqI;MAAc,GACnDnK,MAAM,CAACgB,IAAI,CAACsI,uBAAuB,CAAC,CAAC5H,MAAM,GAAG,CAAC,GAAG;QAAEiH,gBAAgB,EAAEW;MAAwB,CAAC,GAAG,IAAI,CAC3G;;MAED;MACA,IAAI,IAAI,CAACxH,iBAAiB,CAACsH,QAAQ,EAAE;QACnC5G,aAAa,CAAC4H,YAAY,GAAG,CAAC,oBAAoB,CAAC;QACnD5H,aAAa,CAAC6H,QAAQ,GAAG,IAAI,CAAClB,cAAc,CAAC,IAAI,CAACrH,iBAAiB,CAACsH,QAAQ,CAAC;MAC/E;;MAEA;MACA;MACA,IAAI,IAAI,CAACjH,qBAAqB,CAAC6B,YAAY,IAAIxB,aAAa,CAACK,IAAI,CAACnB,MAAM,KAAK,CAAC,EAAE;QAC9Ec,aAAa,CAACK,IAAI,GAAG,CACnB;UACEoB,yBAAyB,EAAE,IAAI,CAAC9B,qBAAqB,CAAC6B;QACxD,CAAC,CACF;MACH;;MAEA;MACA,OAAOxB,aAAa;IACtB;EAAC;AAAA;AAGHxC,MAAM,CAACkF,MAAM,CAAC9E,qBAAqB,CAACkK,SAAS,EAAEC,YAAK,CAAC","ignoreList":[]}