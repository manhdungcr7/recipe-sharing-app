{"ast":null,"code":"import api from './api';\nconst authService = {\n  // Đăng nhập bằng Google\n  googleLogin: async tokenId => {\n    try {\n      console.log(\"Attempting to log in with token:\", tokenId ? \"Token exists\" : \"No token\");\n      const response = await api.post('/auth/google', {\n        tokenId\n      });\n      console.log(\"Login response:\", response.data);\n\n      // Lưu thông tin đăng nhập vào localStorage\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      console.error(\"Google login error:\", error);\n      throw error.response ? error.response.data : error;\n    }\n  },\n  // Lấy thông tin người dùng hiện tại\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  },\n  // Đăng xuất\n  logout: () => {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user');\n  },\n  // Kiểm tra nếu đã đăng nhập\n  isAuthenticated: () => {\n    return !!localStorage.getItem('auth_token');\n  },\n  // Lấy thông tin người dùng từ localStorage\n  getUser: () => {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  // Kiểm tra nếu là admin\n  isAdmin: () => {\n    const user = authService.getUser();\n    return user && user.role === 'admin';\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","googleLogin","tokenId","console","log","response","post","data","token","localStorage","setItem","JSON","stringify","user","error","getCurrentUser","get","logout","removeItem","isAuthenticated","getItem","getUser","parse","isAdmin","role"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nconst authService = {\n    // Đăng nhập bằng Google\n    googleLogin: async (tokenId) => {\n        try {\n            console.log(\"Attempting to log in with token:\", tokenId ? \"Token exists\" : \"No token\");\n            const response = await api.post('/auth/google', { tokenId });\n            console.log(\"Login response:\", response.data);\n            \n            // Lưu thông tin đăng nhập vào localStorage\n            if (response.data.token) {\n                localStorage.setItem('auth_token', response.data.token);\n                localStorage.setItem('user', JSON.stringify(response.data.user));\n            }\n            \n            return response.data;\n        } catch (error) {\n            console.error(\"Google login error:\", error);\n            throw error.response ? error.response.data : error;\n        }\n    },\n\n    // Lấy thông tin người dùng hiện tại\n    getCurrentUser: async () => {\n        try {\n            const response = await api.get('/auth/me');\n            return response.data;\n        } catch (error) {\n            throw error.response ? error.response.data : error;\n        }\n    },\n\n    // Đăng xuất\n    logout: () => {\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('user');\n    },\n\n    // Kiểm tra nếu đã đăng nhập\n    isAuthenticated: () => {\n        return !!localStorage.getItem('auth_token');\n    },\n\n    // Lấy thông tin người dùng từ localStorage\n    getUser: () => {\n        return JSON.parse(localStorage.getItem('user'));\n    },\n\n    // Kiểm tra nếu là admin\n    isAdmin: () => {\n        const user = authService.getUser();\n        return user && user.role === 'admin';\n    }\n};\n\nexport default authService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAChB;EACAC,WAAW,EAAE,MAAOC,OAAO,IAAK;IAC5B,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,OAAO,GAAG,cAAc,GAAG,UAAU,CAAC;MACtF,MAAMG,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,cAAc,EAAE;QAAEJ;MAAQ,CAAC,CAAC;MAC5DC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,QAAQ,CAACE,IAAI,CAAC;;MAE7C;MACA,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;QACrBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;QACvDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;MACpE;MAEA,OAAOR,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK,CAACT,QAAQ,GAAGS,KAAK,CAACT,QAAQ,CAACE,IAAI,GAAGO,KAAK;IACtD;EACJ,CAAC;EAED;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACA,MAAMV,QAAQ,GAAG,MAAMN,GAAG,CAACiB,GAAG,CAAC,UAAU,CAAC;MAC1C,OAAOX,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACZ,MAAMA,KAAK,CAACT,QAAQ,GAAGS,KAAK,CAACT,QAAQ,CAACE,IAAI,GAAGO,KAAK;IACtD;EACJ,CAAC;EAED;EACAG,MAAM,EAAEA,CAAA,KAAM;IACVR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;IACrCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACnC,CAAC;EAED;EACAC,eAAe,EAAEA,CAAA,KAAM;IACnB,OAAO,CAAC,CAACV,YAAY,CAACW,OAAO,CAAC,YAAY,CAAC;EAC/C,CAAC;EAED;EACAC,OAAO,EAAEA,CAAA,KAAM;IACX,OAAOV,IAAI,CAACW,KAAK,CAACb,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC,CAAC;EACnD,CAAC;EAED;EACAG,OAAO,EAAEA,CAAA,KAAM;IACX,MAAMV,IAAI,GAAGb,WAAW,CAACqB,OAAO,CAAC,CAAC;IAClC,OAAOR,IAAI,IAAIA,IAAI,CAACW,IAAI,KAAK,OAAO;EACxC;AACJ,CAAC;AAED,eAAexB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}