{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\web_SE\\\\recipe-sharing-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Kiểm tra trạng thái đăng nhập khi component mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        const token = localStorage.getItem('auth_token');\n        if (token && storedUser) {\n          // Kiểm tra token hết hạn\n          const decodedToken = jwtDecode(token);\n          if (decodedToken.exp * 1000 < Date.now()) {\n            // Token hết hạn\n            authService.logout();\n            setCurrentUser(null);\n            setIsAuthenticated(false);\n          } else {\n            // Token còn hạn\n            setCurrentUser(JSON.parse(storedUser));\n            setIsAuthenticated(true);\n\n            // Cập nhật thông tin người dùng từ server\n            try {\n              const userData = await authService.getCurrentUser();\n              setCurrentUser(userData.data);\n            } catch (err) {\n              console.log(\"Could not fetch updated user info\");\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"Auth check error:\", err);\n        authService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Đăng nhập truyền thống\n  const login = (user, token) => {\n    setCurrentUser(user);\n    setIsAuthenticated(true);\n  };\n\n  // Đăng nhập với Google (giữ lại nếu vẫn muốn dùng)\n  const loginWithGoogle = async tokenId => {\n    try {\n      setError(null);\n      setLoading(true);\n      const result = await authService.googleLogin(tokenId);\n      setCurrentUser(result.user);\n      setIsAuthenticated(true);\n      return result;\n    } catch (err) {\n      setError(err.message || \"Login failed\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Đăng xuất\n  const logout = () => {\n    authService.logout();\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isAuthenticated,\n    login,\n    loginWithGoogle,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"WPajnuPigti7mWYEkYmKZfTIuBU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","checkAuthStatus","storedUser","localStorage","getItem","token","decodedToken","exp","Date","now","logout","JSON","parse","userData","getCurrentUser","data","err","console","log","login","user","loginWithGoogle","tokenId","result","googleLogin","message","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jwtDecode } from \"jwt-decode\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    // Kiểm tra trạng thái đăng nhập khi component mount\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const storedUser = localStorage.getItem('user');\n                const token = localStorage.getItem('auth_token');\n                \n                if (token && storedUser) {\n                    // Kiểm tra token hết hạn\n                    const decodedToken = jwtDecode(token);\n                    if (decodedToken.exp * 1000 < Date.now()) {\n                        // Token hết hạn\n                        authService.logout();\n                        setCurrentUser(null);\n                        setIsAuthenticated(false);\n                    } else {\n                        // Token còn hạn\n                        setCurrentUser(JSON.parse(storedUser));\n                        setIsAuthenticated(true);\n                        \n                        // Cập nhật thông tin người dùng từ server\n                        try {\n                            const userData = await authService.getCurrentUser();\n                            setCurrentUser(userData.data);\n                        } catch (err) {\n                            console.log(\"Could not fetch updated user info\");\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error(\"Auth check error:\", err);\n                authService.logout();\n                setCurrentUser(null);\n                setIsAuthenticated(false);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        checkAuthStatus();\n    }, []);\n\n    // Đăng nhập truyền thống\n    const login = (user, token) => {\n        setCurrentUser(user);\n        setIsAuthenticated(true);\n    };\n\n    // Đăng nhập với Google (giữ lại nếu vẫn muốn dùng)\n    const loginWithGoogle = async (tokenId) => {\n        try {\n            setError(null);\n            setLoading(true);\n            \n            const result = await authService.googleLogin(tokenId);\n            \n            setCurrentUser(result.user);\n            setIsAuthenticated(true);\n            \n            return result;\n        } catch (err) {\n            setError(err.message || \"Login failed\");\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Đăng xuất\n    const logout = () => {\n        authService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n    };\n\n    // Context value\n    const value = {\n        currentUser,\n        loading,\n        error,\n        isAuthenticated,\n        login,\n        loginWithGoogle,\n        logout,\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}