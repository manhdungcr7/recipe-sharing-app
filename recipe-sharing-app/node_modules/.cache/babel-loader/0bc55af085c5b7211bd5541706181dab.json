{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import authService from'../services/authService';import{jwtDecode}from\"jwt-decode\";import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);// Kiểm tra trạng thái đăng nhập khi component mount\nuseEffect(()=>{const checkAuthStatus=async()=>{try{const storedUser=localStorage.getItem('user');const token=localStorage.getItem('auth_token');if(token&&storedUser){// Kiểm tra token hết hạn\nconst decodedToken=jwtDecode(token);if(decodedToken.exp*1000<Date.now()){// Token hết hạn\nauthService.logout();setCurrentUser(null);setIsAuthenticated(false);}else{// Token còn hạn\nsetCurrentUser(JSON.parse(storedUser));setIsAuthenticated(true);// Cập nhật thông tin người dùng từ server\ntry{const userData=await authService.getCurrentUser();setCurrentUser(userData.data);}catch(err){console.log(\"Could not fetch updated user info\");}}}}catch(err){console.error(\"Auth check error:\",err);authService.logout();setCurrentUser(null);setIsAuthenticated(false);}finally{setLoading(false);}};checkAuthStatus();},[]);// Đăng nhập với Google\nconst loginWithGoogle=async tokenId=>{try{setError(null);setLoading(true);const result=await authService.googleLogin(tokenId);setCurrentUser(result.user);setIsAuthenticated(true);return result;}catch(err){setError(err.message||\"Login failed\");throw err;}finally{setLoading(false);}};// Đăng xuất\nconst logout=()=>{authService.logout();setCurrentUser(null);setIsAuthenticated(false);};// Context value\nconst value={currentUser,loading,error,isAuthenticated,loginWithGoogle,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jwtDecode","jsx","_jsx","AuthContext","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","checkAuthStatus","storedUser","localStorage","getItem","token","decodedToken","exp","Date","now","logout","JSON","parse","userData","getCurrentUser","data","err","console","log","loginWithGoogle","tokenId","result","googleLogin","user","message","value","Provider"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jwtDecode } from \"jwt-decode\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    // Kiểm tra trạng thái đăng nhập khi component mount\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const storedUser = localStorage.getItem('user');\n                const token = localStorage.getItem('auth_token');\n                \n                if (token && storedUser) {\n                    // Kiểm tra token hết hạn\n                    const decodedToken = jwtDecode(token);\n                    if (decodedToken.exp * 1000 < Date.now()) {\n                        // Token hết hạn\n                        authService.logout();\n                        setCurrentUser(null);\n                        setIsAuthenticated(false);\n                    } else {\n                        // Token còn hạn\n                        setCurrentUser(JSON.parse(storedUser));\n                        setIsAuthenticated(true);\n                        \n                        // Cập nhật thông tin người dùng từ server\n                        try {\n                            const userData = await authService.getCurrentUser();\n                            setCurrentUser(userData.data);\n                        } catch (err) {\n                            console.log(\"Could not fetch updated user info\");\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error(\"Auth check error:\", err);\n                authService.logout();\n                setCurrentUser(null);\n                setIsAuthenticated(false);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        checkAuthStatus();\n    }, []);\n\n    // Đăng nhập với Google\n    const loginWithGoogle = async (tokenId) => {\n        try {\n            setError(null);\n            setLoading(true);\n            \n            const result = await authService.googleLogin(tokenId);\n            \n            setCurrentUser(result.user);\n            setIsAuthenticated(true);\n            \n            return result;\n        } catch (err) {\n            setError(err.message || \"Login failed\");\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Đăng xuất\n    const logout = () => {\n        authService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n    };\n\n    // Context value\n    const value = {\n        currentUser,\n        loading,\n        error,\n        isAuthenticated,\n        loginWithGoogle,\n        logout,\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}