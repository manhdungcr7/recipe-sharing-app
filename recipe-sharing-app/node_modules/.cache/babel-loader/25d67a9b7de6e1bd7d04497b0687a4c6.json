{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import authService from'../services/authService';import{jwtDecode}from\"jwt-decode\";import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext({currentUser:null,loading:true,error:null,isAuthenticated:false,login:(user,token)=>{},loginWithGoogle:credential=>Promise.resolve(),logout:()=>{}});export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);// Kiểm tra trạng thái đăng nhập khi component mount\nuseEffect(()=>{const checkAuthStatus=async()=>{try{const storedUser=localStorage.getItem('user');const token=localStorage.getItem('auth_token');if(token&&storedUser){// Kiểm tra token hết hạn\nconst decodedToken=jwtDecode(token);if(decodedToken.exp*1000<Date.now()){// Token hết hạn\nauthService.logout();setCurrentUser(null);setIsAuthenticated(false);}else{// Token còn hạn\nsetCurrentUser(JSON.parse(storedUser));setIsAuthenticated(true);// Cập nhật thông tin người dùng từ server\ntry{const userData=await authService.getCurrentUser();setCurrentUser(userData.data);}catch(err){console.log(\"Could not fetch updated user info\");}}}}catch(err){console.error(\"Auth check error:\",err);authService.logout();setCurrentUser(null);setIsAuthenticated(false);}finally{setLoading(false);}};checkAuthStatus();},[]);// Đăng nhập truyền thống\nconst login=(user,token)=>{setCurrentUser(user);setIsAuthenticated(true);};// Đăng nhập với Google (giữ lại nếu vẫn muốn dùng)\nconst loginWithGoogle=async tokenId=>{try{setError(null);setLoading(true);const result=await authService.googleLogin(tokenId);setCurrentUser(result.user);setIsAuthenticated(true);return result;}catch(err){setError(err.message||\"Login failed\");throw err;}finally{setLoading(false);}};// Đăng xuất\nconst logout=()=>{authService.logout();setCurrentUser(null);setIsAuthenticated(false);};// Context value\nconst value={currentUser,loading,error,isAuthenticated,login,loginWithGoogle,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jwtDecode","jsx","_jsx","AuthContext","currentUser","loading","error","isAuthenticated","login","user","token","loginWithGoogle","credential","Promise","resolve","logout","AuthProvider","_ref","children","setCurrentUser","setLoading","setError","setIsAuthenticated","checkAuthStatus","storedUser","localStorage","getItem","decodedToken","exp","Date","now","JSON","parse","userData","getCurrentUser","data","err","console","log","tokenId","result","googleLogin","message","value","Provider"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jwtDecode } from \"jwt-decode\";\n\nexport const AuthContext = createContext({\n  currentUser: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n  login: (user, token) => {},\n  loginWithGoogle: (credential) => Promise.resolve(),\n  logout: () => {}\n});\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    // Kiểm tra trạng thái đăng nhập khi component mount\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const storedUser = localStorage.getItem('user');\n                const token = localStorage.getItem('auth_token');\n                \n                if (token && storedUser) {\n                    // Kiểm tra token hết hạn\n                    const decodedToken = jwtDecode(token);\n                    if (decodedToken.exp * 1000 < Date.now()) {\n                        // Token hết hạn\n                        authService.logout();\n                        setCurrentUser(null);\n                        setIsAuthenticated(false);\n                    } else {\n                        // Token còn hạn\n                        setCurrentUser(JSON.parse(storedUser));\n                        setIsAuthenticated(true);\n                        \n                        // Cập nhật thông tin người dùng từ server\n                        try {\n                            const userData = await authService.getCurrentUser();\n                            setCurrentUser(userData.data);\n                        } catch (err) {\n                            console.log(\"Could not fetch updated user info\");\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error(\"Auth check error:\", err);\n                authService.logout();\n                setCurrentUser(null);\n                setIsAuthenticated(false);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        checkAuthStatus();\n    }, []);\n\n    // Đăng nhập truyền thống\n    const login = (user, token) => {\n        setCurrentUser(user);\n        setIsAuthenticated(true);\n    };\n\n    // Đăng nhập với Google (giữ lại nếu vẫn muốn dùng)\n    const loginWithGoogle = async (tokenId) => {\n        try {\n            setError(null);\n            setLoading(true);\n            \n            const result = await authService.googleLogin(tokenId);\n            \n            setCurrentUser(result.user);\n            setIsAuthenticated(true);\n            \n            return result;\n        } catch (err) {\n            setError(err.message || \"Login failed\");\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Đăng xuất\n    const logout = () => {\n        authService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n    };\n\n    // Context value\n    const value = {\n        currentUser,\n        loading,\n        error,\n        isAuthenticated,\n        login,\n        loginWithGoogle,\n        logout,\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}