{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\web_SE\\\\recipe-sharing-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n  login: (user, token) => {},\n  loginWithGoogle: credential => Promise.resolve(),\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Kiểm tra trạng thái đăng nhập khi component mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        const token = localStorage.getItem('auth_token');\n        if (token && storedUser) {\n          // Kiểm tra token hết hạn\n          const decodedToken = jwtDecode(token);\n          if (decodedToken.exp * 1000 < Date.now()) {\n            // Token hết hạn\n            authService.logout();\n            setCurrentUser(null);\n            setIsAuthenticated(false);\n          } else {\n            // Token còn hạn\n            setCurrentUser(JSON.parse(storedUser));\n            setIsAuthenticated(true);\n\n            // Cập nhật thông tin người dùng từ server\n            try {\n              const userData = await authService.getCurrentUser();\n              setCurrentUser(userData.data);\n            } catch (err) {\n              console.log(\"Could not fetch updated user info\");\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"Auth check error:\", err);\n        authService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Đăng nhập truyền thống\n  const login = (user, token) => {\n    setCurrentUser(user);\n    setIsAuthenticated(true);\n  };\n\n  // Đăng nhập với Google (giữ lại nếu vẫn muốn dùng)\n  const loginWithGoogle = async tokenId => {\n    try {\n      setError(null);\n      setLoading(true);\n      const result = await authService.googleLogin(tokenId);\n      setCurrentUser(result.user);\n      setIsAuthenticated(true);\n      return result;\n    } catch (err) {\n      setError(err.message || \"Login failed\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Đăng xuất\n  const logout = () => {\n    authService.logout();\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isAuthenticated,\n    login,\n    loginWithGoogle,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"WPajnuPigti7mWYEkYmKZfTIuBU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jwtDecode","jsxDEV","_jsxDEV","AuthContext","currentUser","loading","error","isAuthenticated","login","user","token","loginWithGoogle","credential","Promise","resolve","logout","AuthProvider","children","_s","setCurrentUser","setLoading","setError","setIsAuthenticated","checkAuthStatus","storedUser","localStorage","getItem","decodedToken","exp","Date","now","JSON","parse","userData","getCurrentUser","data","err","console","log","tokenId","result","googleLogin","message","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jwtDecode } from \"jwt-decode\";\n\nexport const AuthContext = createContext({\n  currentUser: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n  login: (user, token) => {},\n  loginWithGoogle: (credential) => Promise.resolve(),\n  logout: () => {}\n});\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    // Kiểm tra trạng thái đăng nhập khi component mount\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const storedUser = localStorage.getItem('user');\n                const token = localStorage.getItem('auth_token');\n                \n                if (token && storedUser) {\n                    // Kiểm tra token hết hạn\n                    const decodedToken = jwtDecode(token);\n                    if (decodedToken.exp * 1000 < Date.now()) {\n                        // Token hết hạn\n                        authService.logout();\n                        setCurrentUser(null);\n                        setIsAuthenticated(false);\n                    } else {\n                        // Token còn hạn\n                        setCurrentUser(JSON.parse(storedUser));\n                        setIsAuthenticated(true);\n                        \n                        // Cập nhật thông tin người dùng từ server\n                        try {\n                            const userData = await authService.getCurrentUser();\n                            setCurrentUser(userData.data);\n                        } catch (err) {\n                            console.log(\"Could not fetch updated user info\");\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error(\"Auth check error:\", err);\n                authService.logout();\n                setCurrentUser(null);\n                setIsAuthenticated(false);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        checkAuthStatus();\n    }, []);\n\n    // Đăng nhập truyền thống\n    const login = (user, token) => {\n        setCurrentUser(user);\n        setIsAuthenticated(true);\n    };\n\n    // Đăng nhập với Google (giữ lại nếu vẫn muốn dùng)\n    const loginWithGoogle = async (tokenId) => {\n        try {\n            setError(null);\n            setLoading(true);\n            \n            const result = await authService.googleLogin(tokenId);\n            \n            setCurrentUser(result.user);\n            setIsAuthenticated(true);\n            \n            return result;\n        } catch (err) {\n            setError(err.message || \"Login failed\");\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Đăng xuất\n    const logout = () => {\n        authService.logout();\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n    };\n\n    // Context value\n    const value = {\n        currentUser,\n        loading,\n        error,\n        isAuthenticated,\n        login,\n        loginWithGoogle,\n        logout,\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}