{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\web_SE\\\\recipe-sharing-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create the provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Define state variables for authentication\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on component mount\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        // Use consistent token key - 'token' instead of 'auth_token'\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Fetch user data from API\n          const response = await fetch('http://localhost:5000/api/auth/me', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const userData = await response.json();\n            setCurrentUser(userData.data);\n            setIsAuthenticated(true);\n          } else {\n            // If token is invalid, clear it\n            localStorage.removeItem('token');\n            setIsAuthenticated(false);\n            setCurrentUser(null);\n          }\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Login function\n  const login = async (token, userData) => {\n    // Save token with the consistent key\n    localStorage.setItem('token', token);\n    if (userData) {\n      localStorage.setItem('user', JSON.stringify(userData));\n    }\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Google login function\n  const loginWithGoogle = async tokenId => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          tokenId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Login failed with status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Save token with the consistent key\n      localStorage.setItem('token', data.token);\n\n      // Update state\n      setCurrentUser(data.user);\n      setIsAuthenticated(true);\n      return data.user;\n    } catch (error) {\n      console.error('Google login error:', error);\n      throw error;\n    }\n  };\n\n  // Update user avatar\n  const updateAvatar = avatarUrl => {\n    if (currentUser) {\n      setCurrentUser({\n        ...currentUser,\n        picture: avatarUrl\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      isAuthenticated,\n      loading,\n      login,\n      logout,\n      loginWithGoogle,\n      updateAvatar\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"fSs8I3rmRpj0Th9Mm1M79E+wcpY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkLoggedIn","token","localStorage","getItem","response","fetch","headers","Authorization","ok","userData","json","data","removeItem","error","console","login","setItem","JSON","stringify","logout","loginWithGoogle","tokenId","method","body","Error","status","user","updateAvatar","avatarUrl","picture","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create the context\nexport const AuthContext = createContext();\n\n// Create the provider component\nexport const AuthProvider = ({ children }) => {\n  // Define state variables for authentication\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on component mount\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        // Use consistent token key - 'token' instead of 'auth_token'\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Fetch user data from API\n          const response = await fetch('http://localhost:5000/api/auth/me', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          \n          if (response.ok) {\n            const userData = await response.json();\n            setCurrentUser(userData.data);\n            setIsAuthenticated(true);\n          } else {\n            // If token is invalid, clear it\n            localStorage.removeItem('token');\n            setIsAuthenticated(false);\n            setCurrentUser(null);\n          }\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkLoggedIn();\n  }, []);\n\n  // Login function\n  const login = async (token, userData) => {\n    // Save token with the consistent key\n    localStorage.setItem('token', token);\n    \n    if (userData) {\n      localStorage.setItem('user', JSON.stringify(userData));\n    }\n    \n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Google login function\n  const loginWithGoogle = async (tokenId) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ tokenId })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login failed with status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Save token with the consistent key\n      localStorage.setItem('token', data.token);\n      \n      // Update state\n      setCurrentUser(data.user);\n      setIsAuthenticated(true);\n      \n      return data.user;\n    } catch (error) {\n      console.error('Google login error:', error);\n      throw error;\n    }\n  };\n\n  // Update user avatar\n  const updateAvatar = (avatarUrl) => {\n    if (currentUser) {\n      setCurrentUser({\n        ...currentUser,\n        picture: avatarUrl\n      });\n    }\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        currentUser, \n        isAuthenticated, \n        loading,\n        login, \n        logout, \n        loginWithGoogle,\n        updateAvatar\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}