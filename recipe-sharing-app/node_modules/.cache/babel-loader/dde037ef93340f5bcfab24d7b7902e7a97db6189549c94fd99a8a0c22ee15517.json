{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\web_SE\\\\recipe-sharing-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n  login: (user, token) => {},\n  logout: () => {},\n  updateAvatar: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const isAuthenticated = !!currentUser;\n\n  // Kiểm tra trạng thái đăng nhập khi component mount\n  useEffect(() => {\n    // Hàm kiểm tra token khi làm mới trang\n    const checkStoredAuth = async () => {\n      setLoading(true);\n      try {\n        // Ưu tiên token trước\n        const token = localStorage.getItem('token');\n        // Nếu không có token, thử auth_token (để hỗ trợ người dùng đã đăng nhập trước đó)\n        const authToken = !token ? localStorage.getItem('auth_token') : null;\n        if (token || authToken) {\n          // Nếu có auth_token nhưng không có token, di chuyển nó\n          if (authToken && !token) {\n            localStorage.setItem('token', authToken);\n            localStorage.removeItem('auth_token');\n          }\n\n          // Lấy thông tin người dùng từ localStorage\n          const storedUser = localStorage.getItem('user');\n          if (storedUser) {\n            const userData = JSON.parse(storedUser);\n            setCurrentUser(userData);\n            setIsAuthenticated(true);\n            console.log(\"User data loaded from localStorage:\", userData);\n          } else {\n            // Nếu không có thông tin người dùng, cố gắng lấy từ API\n            try {\n              const response = await fetch('http://localhost:5000/api/auth/me', {\n                headers: {\n                  'Authorization': `Bearer ${token || authToken}`\n                }\n              });\n              if (response.ok) {\n                const data = await response.json();\n                if (data.success && data.data) {\n                  localStorage.setItem('user', JSON.stringify(data.data));\n                  setCurrentUser(data.data);\n                  setIsAuthenticated(true);\n                } else {\n                  throw new Error('Invalid user data from API');\n                }\n              } else {\n                // Token không hợp lệ hoặc hết hạn\n                throw new Error('Invalid or expired token');\n              }\n            } catch (fetchError) {\n              console.error('Failed to get user data from API:', fetchError);\n              // Xóa token nếu không lấy được thông tin người dùng\n              localStorage.removeItem('token');\n              localStorage.removeItem('auth_token');\n              setIsAuthenticated(false);\n              setCurrentUser(null);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error checking stored auth:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('auth_token');\n        setIsAuthenticated(false);\n        setCurrentUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkStoredAuth();\n  }, []);\n\n  // Đăng nhập thông thường\n  const login = async (token, userData) => {\n    try {\n      // Đảm bảo có token\n      if (!token) {\n        console.error(\"No token provided to login function\");\n        return;\n      }\n\n      // Chỉ sử dụng key 'token', không sử dụng auth_token\n      localStorage.setItem('token', token);\n\n      // Đảm bảo userData có đúng định dạng\n      if (userData && typeof userData === 'object') {\n        localStorage.setItem('user', JSON.stringify(userData));\n\n        // Cập nhật state trong context\n        setCurrentUser(userData);\n        setIsAuthenticated(true);\n        console.log(\"Login successful with token:\", token.substring(0, 15) + \"...\");\n        console.log(\"User data:\", userData);\n      } else {\n        console.error(\"Invalid user data:\", userData);\n      }\n    } catch (error) {\n      console.error(\"Error in login function:\", error);\n    }\n  };\n\n  // Đăng xuất\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Bỏ auth_token nếu có\n    localStorage.removeItem('auth_token');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    console.log(\"Logged out successfully\");\n  };\n\n  // Cập nhật avatar\n  const updateAvatar = pictureUrl => {\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        picture: pictureUrl\n      };\n      setCurrentUser(updatedUser);\n      // Cập nhật cả trong localStorage\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isAuthenticated,\n    login,\n    logout,\n    updateAvatar\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","currentUser","loading","error","isAuthenticated","login","user","token","logout","updateAvatar","AuthProvider","children","_s","setCurrentUser","setLoading","setError","checkStoredAuth","localStorage","getItem","authToken","setItem","removeItem","storedUser","userData","JSON","parse","setIsAuthenticated","console","log","response","fetch","headers","ok","data","json","success","stringify","Error","fetchError","substring","pictureUrl","updatedUser","picture","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const AuthContext = createContext({\n  currentUser: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n  login: (user, token) => {},\n  logout: () => {},\n  updateAvatar: () => {}\n});\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const isAuthenticated = !!currentUser;\n\n    // Kiểm tra trạng thái đăng nhập khi component mount\n    useEffect(() => {\n        // Hàm kiểm tra token khi làm mới trang\n        const checkStoredAuth = async () => {\n            setLoading(true);\n            \n            try {\n                // Ưu tiên token trước\n                const token = localStorage.getItem('token');\n                // Nếu không có token, thử auth_token (để hỗ trợ người dùng đã đăng nhập trước đó)\n                const authToken = !token ? localStorage.getItem('auth_token') : null;\n                \n                if (token || authToken) {\n                  // Nếu có auth_token nhưng không có token, di chuyển nó\n                  if (authToken && !token) {\n                    localStorage.setItem('token', authToken);\n                    localStorage.removeItem('auth_token');\n                  }\n                  \n                  // Lấy thông tin người dùng từ localStorage\n                  const storedUser = localStorage.getItem('user');\n                  if (storedUser) {\n                    const userData = JSON.parse(storedUser);\n                    setCurrentUser(userData);\n                    setIsAuthenticated(true);\n                    \n                    console.log(\"User data loaded from localStorage:\", userData);\n                  } else {\n                    // Nếu không có thông tin người dùng, cố gắng lấy từ API\n                    try {\n                      const response = await fetch('http://localhost:5000/api/auth/me', {\n                        headers: {\n                          'Authorization': `Bearer ${token || authToken}`\n                        }\n                      });\n                      \n                      if (response.ok) {\n                        const data = await response.json();\n                        if (data.success && data.data) {\n                          localStorage.setItem('user', JSON.stringify(data.data));\n                          setCurrentUser(data.data);\n                          setIsAuthenticated(true);\n                        } else {\n                          throw new Error('Invalid user data from API');\n                        }\n                      } else {\n                        // Token không hợp lệ hoặc hết hạn\n                        throw new Error('Invalid or expired token');\n                      }\n                    } catch (fetchError) {\n                      console.error('Failed to get user data from API:', fetchError);\n                      // Xóa token nếu không lấy được thông tin người dùng\n                      localStorage.removeItem('token');\n                      localStorage.removeItem('auth_token');\n                      setIsAuthenticated(false);\n                      setCurrentUser(null);\n                    }\n                  }\n                }\n            } catch (error) {\n                console.error('Error checking stored auth:', error);\n                localStorage.removeItem('token');\n                localStorage.removeItem('auth_token');\n                setIsAuthenticated(false);\n                setCurrentUser(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n        \n        checkStoredAuth();\n    }, []);\n\n    // Đăng nhập thông thường\n    const login = async (token, userData) => {\n      try {\n        // Đảm bảo có token\n        if (!token) {\n          console.error(\"No token provided to login function\");\n          return;\n        }\n        \n        // Chỉ sử dụng key 'token', không sử dụng auth_token\n        localStorage.setItem('token', token);\n        \n        // Đảm bảo userData có đúng định dạng\n        if (userData && typeof userData === 'object') {\n          localStorage.setItem('user', JSON.stringify(userData));\n          \n          // Cập nhật state trong context\n          setCurrentUser(userData);\n          setIsAuthenticated(true);\n          \n          console.log(\"Login successful with token:\", token.substring(0, 15) + \"...\");\n          console.log(\"User data:\", userData);\n        } else {\n          console.error(\"Invalid user data:\", userData);\n        }\n      } catch (error) {\n        console.error(\"Error in login function:\", error);\n      }\n    };\n\n    // Đăng xuất\n    const logout = () => {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        // Bỏ auth_token nếu có\n        localStorage.removeItem('auth_token');\n        \n        setCurrentUser(null);\n        setIsAuthenticated(false);\n        \n        console.log(\"Logged out successfully\");\n    };\n\n    // Cập nhật avatar\n    const updateAvatar = (pictureUrl) => {\n        if (currentUser) {\n            const updatedUser = { ...currentUser, picture: pictureUrl };\n            setCurrentUser(updatedUser);\n            // Cập nhật cả trong localStorage\n            localStorage.setItem('user', JSON.stringify(updatedUser));\n        }\n    };\n    \n    const value = {\n        currentUser,\n        loading,\n        error,\n        isAuthenticated,\n        login,\n        logout,\n        updateAvatar\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}