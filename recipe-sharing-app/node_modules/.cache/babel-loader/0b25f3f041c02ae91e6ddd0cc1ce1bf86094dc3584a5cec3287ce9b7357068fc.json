{"ast":null,"code":"// Thêm một biến để theo dõi port\nlet apiPort = 5000; // Port mặc định\nlet apiPortChecked = false;\n\n// Hàm kiểm tra port khả dụng\nconst checkApiPort = async () => {\n  if (apiPortChecked) return apiPort;\n  const ports = [5000, 5001, 5002, 5003, 8080, 8000];\n  for (const port of ports) {\n    try {\n      const response = await fetch(`http://localhost:${port}/api/status`, {\n        method: 'GET',\n        timeout: 1000\n      });\n      if (response.ok) {\n        console.log(`API available at port ${port}`);\n        apiPort = port;\n        apiPortChecked = true;\n        return port;\n      }\n    } catch (error) {\n      console.log(`Port ${port} unavailable or error:`, error.message);\n    }\n  }\n  console.error('Could not find a working API port');\n  return 5000; // Fallback to default\n};\nconst setupFetchInterceptor = () => {\n  const originalFetch = window.fetch;\n  window.fetch = async function (url, options = {}) {\n    // Thêm try-catch bao quanh toàn bộ hàm\n    try {\n      // Đảm bảo URL là chuẩn khi gọi API\n      if (url.includes('/api/') && !url.includes('http')) {\n        await checkApiPort();\n        url = `http://localhost:${apiPort}${url}`;\n      }\n\n      // Nếu là request API, thêm token vào header\n      if (url.includes('/api/')) {\n        const token = localStorage.getItem('token');\n        if (token) {\n          options.headers = {\n            ...options.headers,\n            'Authorization': `Bearer ${token}`\n          };\n        }\n      }\n      console.log(\"Options:\", options);\n      try {\n        const response = await originalFetch(url, options);\n\n        // Kiểm tra response\n        if (response.status === 401) {\n          console.warn('Authentication failed. Logging out...');\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n\n          // Chuyển hướng đến trang đăng nhập nếu không phải đang ở đó\n          if (!window.location.pathname.includes('/login')) {\n            window.location.href = '/login';\n          }\n        }\n        return response;\n      } catch (fetchError) {\n        console.error('Fetch error:', fetchError);\n        // Log thông tin chi tiết\n        console.log('URL attempted:', url);\n        console.log('Options:', JSON.stringify(options));\n        throw fetchError;\n      }\n    } catch (error) {\n      console.error('Fetch interceptor error:', error);\n      throw error;\n    }\n  };\n};\nexport default setupFetchInterceptor;","map":{"version":3,"names":["apiPort","apiPortChecked","checkApiPort","ports","port","response","fetch","method","timeout","ok","console","log","error","message","setupFetchInterceptor","originalFetch","window","url","options","includes","token","localStorage","getItem","headers","status","warn","removeItem","location","pathname","href","fetchError","JSON","stringify"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/utils/fetchInterceptor.js"],"sourcesContent":["// Thêm một biến để theo dõi port\r\nlet apiPort = 5000; // Port mặc định\r\nlet apiPortChecked = false;\r\n\r\n// Hàm kiểm tra port khả dụng\r\nconst checkApiPort = async () => {\r\n  if (apiPortChecked) return apiPort;\r\n  \r\n  const ports = [5000, 5001, 5002, 5003, 8080, 8000];\r\n  \r\n  for (const port of ports) {\r\n    try {\r\n      const response = await fetch(`http://localhost:${port}/api/status`, {\r\n        method: 'GET',\r\n        timeout: 1000\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log(`API available at port ${port}`);\r\n        apiPort = port;\r\n        apiPortChecked = true;\r\n        return port;\r\n      }\r\n    } catch (error) {\r\n      console.log(`Port ${port} unavailable or error:`, error.message);\r\n    }\r\n  }\r\n  \r\n  console.error('Could not find a working API port');\r\n  return 5000; // Fallback to default\r\n};\r\n\r\nconst setupFetchInterceptor = () => {\r\n  const originalFetch = window.fetch;\r\n  \r\n  window.fetch = async function(url, options = {}) {\r\n    // Thêm try-catch bao quanh toàn bộ hàm\r\n    try {\r\n      // Đảm bảo URL là chuẩn khi gọi API\r\n      if (url.includes('/api/') && !url.includes('http')) {\r\n        await checkApiPort();\r\n        url = `http://localhost:${apiPort}${url}`;\r\n      }\r\n      \r\n      // Nếu là request API, thêm token vào header\r\n      if (url.includes('/api/')) {\r\n        const token = localStorage.getItem('token');\r\n        \r\n        if (token) {\r\n          options.headers = {\r\n            ...options.headers,\r\n            'Authorization': `Bearer ${token}`\r\n          };\r\n        }\r\n      }\r\n      \r\n      console.log(\"Options:\", options);\r\n      \r\n      try {\r\n        const response = await originalFetch(url, options);\r\n        \r\n        // Kiểm tra response\r\n        if (response.status === 401) {\r\n          console.warn('Authentication failed. Logging out...');\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          \r\n          // Chuyển hướng đến trang đăng nhập nếu không phải đang ở đó\r\n          if (!window.location.pathname.includes('/login')) {\r\n            window.location.href = '/login';\r\n          }\r\n        }\r\n        \r\n        return response;\r\n      } catch (fetchError) {\r\n        console.error('Fetch error:', fetchError);\r\n        // Log thông tin chi tiết\r\n        console.log('URL attempted:', url);\r\n        console.log('Options:', JSON.stringify(options));\r\n        throw fetchError;\r\n      }\r\n    } catch (error) {\r\n      console.error('Fetch interceptor error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n};\r\n\r\nexport default setupFetchInterceptor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}