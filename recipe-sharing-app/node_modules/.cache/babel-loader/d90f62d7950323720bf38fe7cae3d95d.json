{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\web_SE\\\\recipe-sharing-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in (from local storage)\n    const checkLoggedIn = () => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        try {\n          const decodedToken = jwtDecode(token);\n          // Check if token is expired\n          if (decodedToken.exp * 1000 < Date.now()) {\n            localStorage.removeItem('auth_token');\n            setCurrentUser(null);\n          } else {\n            setCurrentUser(decodedToken);\n          }\n        } catch (error) {\n          localStorage.removeItem('auth_token');\n          setCurrentUser(null);\n        }\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n  const loginWithGoogle = async credential => {\n    try {\n      // In a real app, you would send the credential to your backend\n      // The backend would verify it with Google and return a JWT token\n      // Here we simulate this process for demo purposes\n\n      // Decode the credential to get user info\n      const decodedCredential = jwtDecode(credential);\n\n      // Store user info in state\n      setCurrentUser({\n        id: decodedCredential.sub,\n        name: decodedCredential.name,\n        email: decodedCredential.email,\n        picture: decodedCredential.picture\n      });\n\n      // Store token in localStorage\n      localStorage.setItem('auth_token', credential);\n      return decodedCredential;\n    } catch (error) {\n      throw new Error('Authentication failed');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setCurrentUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loginWithGoogle,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","checkLoggedIn","token","localStorage","getItem","decodedToken","exp","Date","now","removeItem","error","loginWithGoogle","credential","decodedCredential","id","sub","name","email","picture","setItem","Error","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if user is already logged in (from local storage)\n        const checkLoggedIn = () => {\n            const token = localStorage.getItem('auth_token');\n            if (token) {\n                try {\n                    const decodedToken = jwtDecode(token);\n                    // Check if token is expired\n                    if (decodedToken.exp * 1000 < Date.now()) {\n                        localStorage.removeItem('auth_token');\n                        setCurrentUser(null);\n                    } else {\n                        setCurrentUser(decodedToken);\n                    }\n                } catch (error) {\n                    localStorage.removeItem('auth_token');\n                    setCurrentUser(null);\n                }\n            }\n            setLoading(false);\n        };\n\n        checkLoggedIn();\n    }, []);\n\n    const loginWithGoogle = async (credential) => {\n        try {\n            // In a real app, you would send the credential to your backend\n            // The backend would verify it with Google and return a JWT token\n            // Here we simulate this process for demo purposes\n            \n            // Decode the credential to get user info\n            const decodedCredential = jwtDecode(credential);\n            \n            // Store user info in state\n            setCurrentUser({\n                id: decodedCredential.sub,\n                name: decodedCredential.name,\n                email: decodedCredential.email,\n                picture: decodedCredential.picture\n            });\n            \n            // Store token in localStorage\n            localStorage.setItem('auth_token', credential);\n            \n            return decodedCredential;\n        } catch (error) {\n            throw new Error('Authentication failed');\n        }\n    };\n\n    const logout = () => {\n        localStorage.removeItem('auth_token');\n        setCurrentUser(null);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                currentUser,\n                loginWithGoogle,\n                logout,\n                loading\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,aAAa,GAAGA,CAAA,KAAM;MACxB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAChD,IAAIF,KAAK,EAAE;QACP,IAAI;UACA,MAAMG,YAAY,GAAGf,SAAS,CAACY,KAAK,CAAC;UACrC;UACA,IAAIG,YAAY,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;YACtCL,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;YACrCX,cAAc,CAAC,IAAI,CAAC;UACxB,CAAC,MAAM;YACHA,cAAc,CAACO,YAAY,CAAC;UAChC;QACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;UACZP,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;UACrCX,cAAc,CAAC,IAAI,CAAC;QACxB;MACJ;MACAE,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC;IAEDC,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,eAAe,GAAG,MAAOC,UAAU,IAAK;IAC1C,IAAI;MACA;MACA;MACA;;MAEA;MACA,MAAMC,iBAAiB,GAAGvB,SAAS,CAACsB,UAAU,CAAC;;MAE/C;MACAd,cAAc,CAAC;QACXgB,EAAE,EAAED,iBAAiB,CAACE,GAAG;QACzBC,IAAI,EAAEH,iBAAiB,CAACG,IAAI;QAC5BC,KAAK,EAAEJ,iBAAiB,CAACI,KAAK;QAC9BC,OAAO,EAAEL,iBAAiB,CAACK;MAC/B,CAAC,CAAC;;MAEF;MACAf,YAAY,CAACgB,OAAO,CAAC,YAAY,EAAEP,UAAU,CAAC;MAE9C,OAAOC,iBAAiB;IAC5B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZ,MAAM,IAAIU,KAAK,CAAC,uBAAuB,CAAC;IAC5C;EACJ,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjBlB,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;IACrCX,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,oBACIN,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IACjBC,KAAK,EAAE;MACH1B,WAAW;MACXc,eAAe;MACfU,MAAM;MACNtB;IACJ,CAAE;IAAAJ,QAAA,EAEDA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC/B,EAAA,CAxEWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}