{"ast":null,"code":"// Th√™m m·ªôt bi·∫øn ƒë·ªÉ theo d√µi port\nlet apiPort = 5000; // Port m·∫∑c ƒë·ªãnh\nlet apiPortChecked = false;\n\n// H√†m ki·ªÉm tra port kh·∫£ d·ª•ng\nconst checkApiPort = async () => {\n  if (apiPortChecked) return apiPort;\n  const ports = [5000, 5001, 5002, 5003, 8080, 8000];\n  for (const port of ports) {\n    try {\n      const response = await fetch(`http://localhost:${port}/api/status`, {\n        method: 'GET',\n        timeout: 1000\n      });\n      if (response.ok) {\n        console.log(`API available at port ${port}`);\n        apiPort = port;\n        apiPortChecked = true;\n        return port;\n      }\n    } catch (error) {\n      console.log(`Port ${port} unavailable or error:`, error.message);\n    }\n  }\n  console.error('Could not find a working API port');\n  return 5000; // Fallback to default\n};\n\n// C·∫≠p nh·∫≠t h√†m x·ª≠ l√Ω l·ªói\nconst setupFetchInterceptor = () => {\n  const originalFetch = window.fetch;\n  window.fetch = async function (url, options = {}) {\n    try {\n      var _options$headers, _options$headers$Auth;\n      // Log URL th·ª±c t·∫ø ƒë·ªÉ debug\n      console.log(\"üîç Request to:\", url);\n\n      // ƒê·∫£m b·∫£o URL l√† chu·∫©n khi g·ªçi API\n      if (url.includes('/api/') && !url.includes('http')) {\n        url = `http://localhost:5000${url}`;\n        console.log(\"üìå Modified URL:\", url);\n      }\n\n      // Ghi log options n·∫øu c√≥ Bearer token\n      if ((_options$headers = options.headers) !== null && _options$headers !== void 0 && (_options$headers$Auth = _options$headers.Authorization) !== null && _options$headers$Auth !== void 0 && _options$headers$Auth.startsWith('Bearer')) {\n        console.log(\"Options:\", {\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: \"Bearer [token hidden]\"\n          }\n        });\n      } else {\n        console.log(\"Options:\", options);\n      }\n      try {\n        const response = await originalFetch(url, options);\n\n        // Ki·ªÉm tra response status\n        if (!response.ok) {\n          // Log chi ti·∫øt l·ªói t·ª´ response\n          const clone = response.clone(); // Clone ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc body nhi·ªÅu l·∫ßn\n          try {\n            const errorBody = await clone.text();\n            console.error(`üõë API Error (${response.status}):`, errorBody);\n          } catch (parseError) {\n            console.error(`üõë API Error (${response.status}): Could not parse error body`);\n          }\n\n          // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói c·ª• th·ªÉ\n          if (response.status === 401) {\n            console.warn('‚ö†Ô∏è Authentication failed. Logging out...');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            if (!window.location.pathname.includes('/login')) {\n              window.location.href = '/login';\n            }\n          } else if (response.status === 404) {\n            console.error('üìã Endpoint not found. Available endpoints:');\n            // G·ªçi API ƒë·ªÉ li·ªát k√™ t·∫•t c·∫£ endpoints\n            const routesResponse = await originalFetch('http://localhost:5000/api/routes');\n            if (routesResponse.ok) {\n              const routesData = await routesResponse.json();\n              console.table(routesData.routes);\n            }\n          }\n        }\n        return response;\n      } catch (fetchError) {\n        console.error('‚ùå Fetch error:', fetchError);\n        throw fetchError;\n      }\n    } catch (error) {\n      console.error('üìõ Fetch interceptor error:', error);\n      throw error;\n    }\n  };\n};\nexport default setupFetchInterceptor;","map":{"version":3,"names":["apiPort","apiPortChecked","checkApiPort","ports","port","response","fetch","method","timeout","ok","console","log","error","message","setupFetchInterceptor","originalFetch","window","url","options","_options$headers","_options$headers$Auth","includes","headers","Authorization","startsWith","clone","errorBody","text","status","parseError","warn","localStorage","removeItem","location","pathname","href","routesResponse","routesData","json","table","routes","fetchError"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/utils/fetchInterceptor.js"],"sourcesContent":["// Th√™m m·ªôt bi·∫øn ƒë·ªÉ theo d√µi port\r\nlet apiPort = 5000; // Port m·∫∑c ƒë·ªãnh\r\nlet apiPortChecked = false;\r\n\r\n// H√†m ki·ªÉm tra port kh·∫£ d·ª•ng\r\nconst checkApiPort = async () => {\r\n  if (apiPortChecked) return apiPort;\r\n  \r\n  const ports = [5000, 5001, 5002, 5003, 8080, 8000];\r\n  \r\n  for (const port of ports) {\r\n    try {\r\n      const response = await fetch(`http://localhost:${port}/api/status`, {\r\n        method: 'GET',\r\n        timeout: 1000\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log(`API available at port ${port}`);\r\n        apiPort = port;\r\n        apiPortChecked = true;\r\n        return port;\r\n      }\r\n    } catch (error) {\r\n      console.log(`Port ${port} unavailable or error:`, error.message);\r\n    }\r\n  }\r\n  \r\n  console.error('Could not find a working API port');\r\n  return 5000; // Fallback to default\r\n};\r\n\r\n// C·∫≠p nh·∫≠t h√†m x·ª≠ l√Ω l·ªói\r\nconst setupFetchInterceptor = () => {\r\n  const originalFetch = window.fetch;\r\n  \r\n  window.fetch = async function(url, options = {}) {\r\n    try {\r\n      // Log URL th·ª±c t·∫ø ƒë·ªÉ debug\r\n      console.log(\"üîç Request to:\", url);\r\n      \r\n      // ƒê·∫£m b·∫£o URL l√† chu·∫©n khi g·ªçi API\r\n      if (url.includes('/api/') && !url.includes('http')) {\r\n        url = `http://localhost:5000${url}`;\r\n        console.log(\"üìå Modified URL:\", url);\r\n      }\r\n      \r\n      // Ghi log options n·∫øu c√≥ Bearer token\r\n      if (options.headers?.Authorization?.startsWith('Bearer')) {\r\n        console.log(\"Options:\", {\r\n          ...options,\r\n          headers: {\r\n            ...options.headers,\r\n            Authorization: \"Bearer [token hidden]\"\r\n          }\r\n        });\r\n      } else {\r\n        console.log(\"Options:\", options);\r\n      }\r\n      \r\n      try {\r\n        const response = await originalFetch(url, options);\r\n        \r\n        // Ki·ªÉm tra response status\r\n        if (!response.ok) {\r\n          // Log chi ti·∫øt l·ªói t·ª´ response\r\n          const clone = response.clone(); // Clone ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc body nhi·ªÅu l·∫ßn\r\n          try {\r\n            const errorBody = await clone.text();\r\n            console.error(`üõë API Error (${response.status}):`, errorBody);\r\n          } catch (parseError) {\r\n            console.error(`üõë API Error (${response.status}): Could not parse error body`);\r\n          }\r\n          \r\n          // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói c·ª• th·ªÉ\r\n          if (response.status === 401) {\r\n            console.warn('‚ö†Ô∏è Authentication failed. Logging out...');\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            \r\n            if (!window.location.pathname.includes('/login')) {\r\n              window.location.href = '/login';\r\n            }\r\n          } else if (response.status === 404) {\r\n            console.error('üìã Endpoint not found. Available endpoints:');\r\n            // G·ªçi API ƒë·ªÉ li·ªát k√™ t·∫•t c·∫£ endpoints\r\n            const routesResponse = await originalFetch('http://localhost:5000/api/routes');\r\n            if (routesResponse.ok) {\r\n              const routesData = await routesResponse.json();\r\n              console.table(routesData.routes);\r\n            }\r\n          }\r\n        }\r\n        \r\n        return response;\r\n      } catch (fetchError) {\r\n        console.error('‚ùå Fetch error:', fetchError);\r\n        throw fetchError;\r\n      }\r\n    } catch (error) {\r\n      console.error('üìõ Fetch interceptor error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n};\r\n\r\nexport default setupFetchInterceptor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}