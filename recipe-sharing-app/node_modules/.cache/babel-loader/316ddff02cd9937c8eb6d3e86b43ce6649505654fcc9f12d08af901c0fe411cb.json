{"ast":null,"code":"// Lấy bình luận cho công thức\nexport const getRecipeComments = async recipeId => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/comments/recipe/${recipeId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch comments');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n    throw error;\n  }\n};\n\n// Lấy phản hồi của bình luận\nexport const getCommentReplies = async (commentId, page = 1, limit = 10) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/comments/${commentId}/replies?page=${page}&limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch comment replies');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching comment replies:', error);\n    throw new Error('Error fetching comment replies: ' + error.message);\n  }\n};\n\n// Tạo bình luận mới\nexport const createComment = async ({\n  recipeId,\n  text,\n  imageFile = null\n}) => {\n  try {\n    const token = localStorage.getItem('auth_token');\n\n    // Nếu có hình ảnh, sử dụng FormData\n    if (imageFile) {\n      const formData = new FormData();\n      formData.append('text', text);\n      formData.append('image', imageFile);\n      const response = await fetch(`http://localhost:5000/api/comments/recipe/${recipeId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : ''\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to post comment');\n      }\n      const data = await response.json();\n      return data;\n    }\n    // Không có hình ảnh, sử dụng JSON\n    else {\n      const response = await fetch(`http://localhost:5000/api/comments/recipe/${recipeId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token ? `Bearer ${token}` : ''\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to post comment');\n      }\n      const data = await response.json();\n      return data;\n    }\n  } catch (error) {\n    console.error('Error creating comment:', error);\n    throw error;\n  }\n};\n\n// Xóa bình luận\nexport const deleteComment = async commentId => {\n  try {\n    const token = localStorage.getItem('auth_token');\n    const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': token ? `Bearer ${token}` : ''\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete comment');\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error deleting comment:', error);\n    throw error;\n  }\n};\n\n// Phản hồi bình luận\nexport const replyToComment = async (commentId, text) => {\n  try {\n    const token = localStorage.getItem('auth_token');\n    const response = await fetch(`http://localhost:5000/api/comments/${commentId}/reply`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to reply to comment');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error replying to comment:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getRecipeComments","recipeId","response","fetch","ok","Error","data","json","error","console","getCommentReplies","commentId","page","limit","message","createComment","text","imageFile","token","localStorage","getItem","formData","FormData","append","method","headers","body","errorData","JSON","stringify","deleteComment","success","replyToComment"],"sources":["C:/Users/Lenovo/Documents/web_SE/recipe-sharing-app/src/services/commentService.js"],"sourcesContent":["// Lấy bình luận cho công thức\r\nexport const getRecipeComments = async (recipeId) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/api/comments/recipe/${recipeId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch comments');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching comments:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Lấy phản hồi của bình luận\r\nexport const getCommentReplies = async (commentId, page = 1, limit = 10) => {\r\n    try {\r\n        const response = await fetch(`http://localhost:5000/api/comments/${commentId}/replies?page=${page}&limit=${limit}`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch comment replies');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching comment replies:', error);\r\n        throw new Error('Error fetching comment replies: ' + error.message);\r\n    }\r\n};\r\n\r\n// Tạo bình luận mới\r\nexport const createComment = async ({ recipeId, text, imageFile = null }) => {\r\n  try {\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n    // Nếu có hình ảnh, sử dụng FormData\r\n    if (imageFile) {\r\n      const formData = new FormData();\r\n      formData.append('text', text);\r\n      formData.append('image', imageFile);\r\n      \r\n      const response = await fetch(`http://localhost:5000/api/comments/recipe/${recipeId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': token ? `Bearer ${token}` : '',\r\n        },\r\n        body: formData\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to post comment');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } \r\n    // Không có hình ảnh, sử dụng JSON\r\n    else {\r\n      const response = await fetch(`http://localhost:5000/api/comments/recipe/${recipeId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': token ? `Bearer ${token}` : '',\r\n        },\r\n        body: JSON.stringify({ text })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to post comment');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating comment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Xóa bình luận\r\nexport const deleteComment = async (commentId) => {\r\n  try {\r\n    const token = localStorage.getItem('auth_token');\r\n    const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': token ? `Bearer ${token}` : '',\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete comment');\r\n    }\r\n    \r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error deleting comment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Phản hồi bình luận\r\nexport const replyToComment = async (commentId, text) => {\r\n  try {\r\n    const token = localStorage.getItem('auth_token');\r\n    const response = await fetch(`http://localhost:5000/api/comments/${commentId}/reply`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : '',\r\n      },\r\n      body: JSON.stringify({ text })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to reply to comment');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error replying to comment:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}